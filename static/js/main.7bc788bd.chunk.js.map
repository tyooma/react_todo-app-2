{"version":3,"sources":["componetns/TodoForm.tsx","componetns/TodoList.tsx","componetns/TodoFilter.tsx","api/colors.js","App.tsx","index.tsx"],"names":["TodoForm","onAdd","backgroundChanger","checkAllHandler","ref","useRef","className","onClick","type","id","placeholder","onKeyPress","event","key","current","value","maxLength","TodoList","filter","todos","selectedFilter","onToggle","onRemove","todo","completed","map","classes","push","join","checked","onChange","bind","title","TodoFilter","onFilter","onClear","length","colorList","App","useState","setTodos","setFilter","color","setColor","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","style","backgroundColor","trim","newTodo","Date","now","prev","randomColor","sort","Math","random","every","filterSelected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bc788bd.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { TodoFormProps } from '../interfaces/TodoFormProps';\n\nexport const TodoForm: React.FC<TodoFormProps> = ({ onAdd, backgroundChanger, checkAllHandler }) => {\n  const ref = useRef<HTMLInputElement>(null);\n\n  const keyPressHandler = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      onAdd(ref.current!.value);\n      ref.current!.value = '';\n      backgroundChanger();\n    }\n  };\n\n  return (\n    <div className=\"input-field\">\n      <i className=\"material-icons expand-icon\" onClick={() => checkAllHandler()}>\n        expand_more\n      </i>\n      <input\n        type=\"text\"\n        id=\"title\"\n        placeholder=\"What needs to be done?\"\n        ref={ref}\n        onKeyPress={keyPressHandler}\n        maxLength={100}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { TodoListProps } from '../interfaces/TodoListProps';\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos, selectedFilter, onToggle, onRemove,\n}) => {\n  const showItems = (filter: string) => {\n    if (filter === 'all') {\n      return todos;\n    }\n\n    if (filter === 'active') {\n      todos = todos.filter(todo => todo.completed === false);\n    }\n\n    if (filter === 'completed') {\n      todos = todos.filter(todo => todo.completed === true);\n    }\n\n    return null;\n  };\n\n  showItems(selectedFilter);\n\n  return (\n    <ul>\n      {todos.map(todo => {\n        const classes = ['todo'];\n\n        if (todo.completed) {\n          classes.push('completed');\n        }\n\n        return (\n          <li className={classes.join(' ')} key={todo.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={onToggle.bind(null, todo.id)}\n              />\n              <span className=\"todo-title\">{todo.title}</span>\n              <i className=\"material-icons grey-text\" onClick={() => onRemove(todo.id)}>\n                delete\n              </i>\n            </label>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { TodoFilterProps } from '../interfaces/TodoFilterProps';\n\nexport const TodoFilter: React.FC<TodoFilterProps> = ({ todos, onFilter, onClear }) => (\n  <footer className=\"footer\">\n    <span className=\"count\">\n      {`${todos.filter(todo => todo.completed === false).length} items left`}\n    </span>\n    <ul className=\"filters\">\n      <li>\n        <button\n          className=\"button\"\n          onClick={() => onFilter('all')}\n          type=\"button\"\n        >\n          All\n        </button>\n      </li>\n      <li>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onFilter('active')}\n        >\n          Active\n        </button>\n      </li>\n      <li>\n        <button\n          className=\"button\"\n          onClick={() => onFilter('completed')}\n          type=\"button\"\n        >\n          Completed\n        </button>\n      </li>\n    </ul>\n    <button\n      type=\"button\"\n      className=\"clear-completed button\"\n      onClick={onClear}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n","export const colorList = [\n  '#ef9a9a',\n  '#f48fb1',\n  '#ce93d8',\n  '#b39ddb',\n  '#9fa8da',\n  '#90caf9',\n  '#81d4fa',\n  '#80deea',\n  '#80cbc4',\n  '#a5d6a7',\n  '#c5e1a5',\n  '#e6ee9c',\n  '#fff59d',\n  '#ffe082',\n  '#ffcc80',\n  '#ffab91',\n  '#bcaaa4',\n  '#eeeeee',\n];\n","import React, { useState, useEffect } from 'react';\nimport { TodoForm } from './componetns/TodoForm';\nimport { TodoList } from './componetns/TodoList';\nimport { TodoProps } from './interfaces/TodoProps';\nimport { TodoFilter } from './componetns/TodoFilter';\nimport { colorList } from './api/colors';\nimport './index.css';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<TodoProps[]>([]);\n  const [filter, setFilter] = useState<string>('all');\n  const [color, setColor] = useState<string>('');\n\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]') as TodoProps[];\n\n    setTodos(saved);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addHandler = (title: string) => {\n    if (title.trim().length) {\n      const newTodo: TodoProps = {\n        title,\n        id: Date.now(),\n        completed: false,\n      };\n\n      setTodos(prev => [newTodo, ...prev]);\n    }\n  };\n\n  const toggleHandler = (id: number) => {\n    setTodos(prev => prev.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    }));\n  };\n\n  const removeHandler = (id: number) => {\n    setTodos(prev => prev.filter(todo => todo.id !== id));\n  };\n\n  const checkAllHandler = () => {\n    if (todos.every(todo => todo.completed === true)) {\n      setTodos(prev => prev.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    } else {\n      setTodos(prev => prev.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    }\n  };\n\n  const backgroundChanger = () => {\n    const colors = colorList;\n    const randomColor = colors.sort(() => Math.random() - 0.5);\n\n    setColor(randomColor[0]);\n  };\n\n  const clearCompleted = () => {\n    setTodos(prev => prev.filter(todo => todo.completed === false));\n  };\n\n  const selectedFilter = (filterSelected: string) => {\n    setFilter(filterSelected);\n  };\n\n  return (\n    <div className=\"app-wrapper\" style={{ backgroundColor: color }}>\n      <div className=\"app-container\">\n        <h1>todos</h1>\n        <TodoForm\n          onAdd={addHandler}\n          backgroundChanger={backgroundChanger}\n          checkAllHandler={checkAllHandler}\n        />\n        <TodoList\n          todos={todos}\n          selectedFilter={filter}\n          onToggle={toggleHandler}\n          onRemove={removeHandler}\n        />\n        {todos.length\n          ? (\n            <TodoFilter\n              todos={todos}\n              onFilter={selectedFilter}\n              onClear={clearCompleted}\n            />\n          )\n          : <></>}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}