{"version":3,"sources":["componetns/TodoForm.tsx","componetns/TodoList.tsx","componetns/TodoFilter.tsx","api/colors.js","App.tsx","index.tsx"],"names":["TodoForm","props","ref","useRef","className","type","id","placeholder","onKeyPress","event","key","onAdd","current","value","backgroundChanger","maxLength","TodoList","todos","onToggle","onRemove","map","todo","classes","completed","push","join","checked","onChange","bind","title","onClick","TodoFilter","onFilter","onClear","filter","length","colorList","App","useState","setTodos","page","setColor","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","style","backgroundColor","trim","newTodo","Date","now","prev","randomColor","sort","Math","random","shown","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcba2dc5.chunk.js","sourcesContent":["import React, { useRef } from 'react';\n\ninterface Props {\n  onAdd(title: string): void;\n  backgroundChanger(): void;\n}\n\nexport const TodoForm: React.FC<Props> = (props) => {\n  const ref = useRef<HTMLInputElement>(null);\n\n  const keyPressHandler = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      props.onAdd(ref.current!.value);\n      ref.current!.value = '';\n      props.backgroundChanger();\n    }\n  };\n\n  return (\n    <div className=\"input-field\">\n      <input\n        type=\"text\"\n        id=\"title\"\n        placeholder=\"What needs to be done?\"\n        ref={ref}\n        onKeyPress={keyPressHandler}\n        maxLength={100}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../interfaces/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onToggle(id: number): void;\n  onRemove(id: number): void;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, onToggle, onRemove }) => {\n  return (\n    <ul>\n      {todos.map(todo => {\n        const classes = ['todo'];\n\n        if (todo.completed) {\n          classes.push('completed');\n        }\n\n        return (\n          <li className={classes.join(' ')} key={todo.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={onToggle.bind(null, todo.id)}\n              />\n              <span className=\"todo-title\">{todo.title}</span>\n              <i className=\"material-icons grey-text\" onClick={() => onRemove(todo.id)}>\n                delete\n              </i>\n            </label>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../interfaces/Todo';\n\ninterface Props{\n  todos: Todo[];\n  onFilter(shown: string): void;\n  onClear(): void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({ todos, onFilter, onClear }) => (\n  <footer className=\"footer\">\n    <span className=\"count\">\n      {`${todos.filter(todo => todo.completed === false).length} items left`}\n    </span>\n    <ul className=\"filters\">\n      <li>\n        <button\n          className=\"button\"\n          onClick={() => onFilter('all')}\n          type=\"button\"\n        >\n          All\n        </button>\n      </li>\n      <li>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onFilter('active')}\n        >\n          Active\n        </button>\n      </li>\n      <li>\n        <button\n          className=\"button\"\n          onClick={() => onFilter('completed')}\n          type=\"button\"\n        >\n          Completed\n        </button>\n      </li>\n    </ul>\n    <button\n      type=\"button\"\n      className=\"clear-completed button\"\n      onClick={onClear}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n","export const colorList = [\n  '#ef9a9a',\n  '#f48fb1',\n  '#ce93d8',\n  '#b39ddb',\n  '#9fa8da',\n  '#90caf9',\n  '#81d4fa',\n  '#80deea',\n  '#80cbc4',\n  '#a5d6a7',\n  '#c5e1a5',\n  '#e6ee9c',\n  '#fff59d',\n  '#ffe082',\n  '#ffcc80',\n  '#ffab91',\n  '#bcaaa4',\n  '#eeeeee',\n];\n","import React, { useState, useEffect } from 'react';\nimport { TodoForm } from './componetns/TodoForm';\nimport { TodoList } from './componetns/TodoList';\nimport { Todo } from './interfaces/Todo';\nimport { TodoFilter } from './componetns/TodoFilter';\nimport { colorList } from './api/colors';\nimport './index.css';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  let [page, setColor] = useState<string>('');\n\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]') as Todo[];\n\n    setTodos(saved);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addHandler = (title: string) => {\n    if (title.trim().length) {\n      const newTodo: Todo = {\n        title,\n        id: Date.now(),\n        completed: false,\n      };\n\n      setTodos(prev => [newTodo, ...prev]);\n    }\n  };\n\n  const toggleHandler = (id: number) => {\n    setTodos(prev => prev.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    }));\n  };\n\n  const removeHandler = (id: number) => {\n    setTodos(prev => prev.filter(todo => todo.id !== id));\n  };\n\n  const backgroundChanger = () => {\n    const colors = colorList;\n    const randomColor = colors.sort(() => Math.random() - 0.5);\n\n    setColor(page = randomColor[0]);\n\n    return page;\n  };\n\n  const clearCompleted = () => {\n    setTodos(prev => prev.filter(todo => todo.completed === false));\n  };\n\n  const filterTodos = (shown: string) => {\n    if (shown === 'all') {\n      return todos;\n    }\n\n    if (shown === 'active') {\n      return todos.filter(todo => todo.completed === false);\n    }\n\n    if (shown === 'completed') {\n      return todos.filter(todo => todo.completed === true);\n    }\n\n    return null;\n  };\n\n  return (\n    <div className=\"app-wrapper\" style={{ backgroundColor: page }}>\n      <div className=\"app-container\">\n        <h1>todos</h1>\n        <TodoForm\n          onAdd={addHandler}\n          backgroundChanger={backgroundChanger}\n        />\n        <TodoList\n          todos={todos}\n          onToggle={toggleHandler}\n          onRemove={removeHandler}\n        />\n        {todos.length\n          ? (\n            <TodoFilter\n              todos={todos}\n              onFilter={filterTodos}\n              onClear={clearCompleted}\n            />\n          )\n          : <></>}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}